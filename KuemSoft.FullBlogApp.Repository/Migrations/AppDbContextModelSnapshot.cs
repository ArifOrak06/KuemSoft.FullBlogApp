// <auto-generated />
using System;
using KuemSoft.FullBlogApp.Repository.Contexts.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KuemSoft.FullBlogApp.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.Property<Guid>("ArticlesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ArticlesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ArticleTag");
                });

            modelBuilder.Entity("KuemSoft.FullBlogApp.Core.Entities.Concrete.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7143e119-7e8f-4205-abb2-41434d76f197"),
                            Name = "superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("76a068b9-09d7-42f5-b374-d54b18c51506"),
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("c4d92192-8316-45cd-84dc-e81dc5b80b8b"),
                            Name = "member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("KuemSoft.FullBlogApp.Core.Entities.Concrete.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ImgId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa8504d6-2b32-4e89-8ec0-2f4ebe57074b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b50dc02-e098-439a-a01c-16d502de1de3",
                            Email = "superadmin@kuemsoft.com",
                            EmailConfirmed = true,
                            FirstName = "Arif",
                            LastName = "ORAK",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@KUEMSOFT.COM",
                            NormalizedUserName = "SUPERADMIN@KUEMSOFT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOidCUAqC28NyjD+3FzoHCbpqy7FkBJmO/JDQVDOOR4+jBITnSKztx/dTeAXGFSs/Q==",
                            PhoneNumber = "0111 222 33 44",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "8676467c-ba0a-4ad0-a409-f3744a553559",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@kuemsoft.com"
                        },
                        new
                        {
                            Id = new Guid("f19cc326-05f2-4305-ad39-f4e0645aeca0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d580df44-db58-4557-8d2b-71302f26bb4c",
                            Email = "member@kuemsoft.com",
                            EmailConfirmed = true,
                            FirstName = "Alparslan",
                            LastName = "ORAK",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEMBER@KUEMSOFT.COM",
                            NormalizedUserName = "MEMBER@KUEMSOFT.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDLoZevpAx4H+YuK/GPWnczovpbDfB5LkFZ/fTFZOorb2KRb1/e07e/pR0bkAOZMBg==",
                            PhoneNumber = "0111 222 33 44",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "70603d67-c73d-4118-b986-050f3da4fb1d",
                            TwoFactorEnabled = false,
                            UserName = "member@kuemsoft.com"
                        });
                });

            modelBuilder.Entity("KuemSoft.FullBlogApp.Core.Entities.Concrete.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ImgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImgId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40b63cd3-d9d4-4e47-906f-ea4564b4d827"),
                            AppUserId = new Guid("aa8504d6-2b32-4e89-8ec0-2f4ebe57074b"),
                            Content = "ASP.Net Core Teknolojisi İle Web backend GeliştirmekASP.Net Core Teknolojisi İle Web backend GeliştirmekASP.Net Core Teknolojisi İle Web backend GeliştirmekASP.Net Core Teknolojisi İle Web backend GeliştirmekASP.Net Core Teknolojisi İle Web backend GeliştirmekASP.Net Core Teknolojisi İle Web backend Geliştirmek",
                            CreatedBy = "Adminastrator",
                            CreatedDate = new DateTime(2025, 1, 23, 16, 38, 1, 920, DateTimeKind.Local).AddTicks(3619),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedBy = "Adminastrator",
                            ModifiedDate = new DateTime(2025, 1, 23, 16, 38, 1, 920, DateTimeKind.Local).AddTicks(3620),
                            Title = "ASP.Net Core Teknolojisi İle Web backend Geliştirmek"
                        },
                        new
                        {
                            Id = new Guid("c1b57612-0f59-4d8d-956e-07e40fc7734a"),
                            AppUserId = new Guid("aa8504d6-2b32-4e89-8ec0-2f4ebe57074b"),
                            Content = "ANodeJs ile Restfull Web API GeliştirmekNodeJs ile Restfull Web API GeliştirmekNodeJs ile Restfull Web API GeliştirmekNodeJs ile Restfull Web API GeliştirmekNodeJs ile Restfull Web API GeliştirmekNodeJs ile Restfull Web API GeliştirmekNodeJs ile Restfull Web API GeliştirmekNodeJs ile Restfull Web API GeliştirmekNodeJs ile Restfull Web API GeliştirmekNodeJs ile Restfull Web API Geliştirmek",
                            CreatedBy = "Adminastrator",
                            CreatedDate = new DateTime(2025, 1, 23, 16, 38, 1, 920, DateTimeKind.Local).AddTicks(3624),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedBy = "Adminastrator",
                            ModifiedDate = new DateTime(2025, 1, 23, 16, 38, 1, 920, DateTimeKind.Local).AddTicks(3624),
                            Title = "NodeJs ile Restfull Web API Geliştirmek"
                        });
                });

            modelBuilder.Entity("KuemSoft.FullBlogApp.Core.Entities.Concrete.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6a67185-45c5-4707-af76-1b55ed3c3b6a"),
                            CreatedBy = "Adminastrator",
                            CreatedDate = new DateTime(2025, 1, 23, 16, 38, 1, 920, DateTimeKind.Local).AddTicks(4590),
                            Description = "Mobile Application Development",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedBy = "Adminastrator",
                            ModifiedDate = new DateTime(2025, 1, 23, 16, 38, 1, 920, DateTimeKind.Local).AddTicks(4593)
                        },
                        new
                        {
                            Id = new Guid("6647b6ef-b52b-4ef8-abb1-f32360323bd6"),
                            CreatedBy = "Adminastrator",
                            CreatedDate = new DateTime(2025, 1, 23, 16, 38, 1, 920, DateTimeKind.Local).AddTicks(4595),
                            Description = "Web Application Development",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedBy = "Adminastrator",
                            ModifiedDate = new DateTime(2025, 1, 23, 16, 38, 1, 920, DateTimeKind.Local).AddTicks(4641)
                        });
                });

            modelBuilder.Entity("KuemSoft.FullBlogApp.Core.Entities.Concrete.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("KuemSoft.FullBlogApp.Core.Entities.Concrete.Img", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Img");
                });

            modelBuilder.Entity("KuemSoft.FullBlogApp.Core.Entities.Concrete.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9679a96b-e6e6-44a5-b04e-20c80d70bd4b"),
                            CreatedBy = "Adminastrator",
                            CreatedDate = new DateTime(2025, 1, 23, 16, 38, 1, 920, DateTimeKind.Local).AddTicks(5159),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedBy = "Admiastrator",
                            ModifiedDate = new DateTime(2025, 1, 23, 16, 38, 1, 920, DateTimeKind.Local).AddTicks(5160),
                            Text = "Web Programlama"
                        },
                        new
                        {
                            Id = new Guid("8183e35a-277b-4c1f-8a66-d75f68b80bf5"),
                            CreatedBy = "Adminastrator",
                            CreatedDate = new DateTime(2025, 1, 23, 16, 38, 1, 920, DateTimeKind.Local).AddTicks(5163),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedBy = "Admiastrator",
                            ModifiedDate = new DateTime(2025, 1, 23, 16, 38, 1, 920, DateTimeKind.Local).AddTicks(5164),
                            Text = "Mobil Programlama"
                        },
                        new
                        {
                            Id = new Guid("10b0d58b-8155-48f7-a334-977513ec67d0"),
                            CreatedBy = "Adminastrator",
                            CreatedDate = new DateTime(2025, 1, 23, 16, 38, 1, 920, DateTimeKind.Local).AddTicks(5166),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedBy = "Admiastrator",
                            ModifiedDate = new DateTime(2025, 1, 23, 16, 38, 1, 920, DateTimeKind.Local).AddTicks(5167),
                            Text = "Masaüstü Programlama"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.HasOne("KuemSoft.FullBlogApp.Core.Entities.Concrete.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KuemSoft.FullBlogApp.Core.Entities.Concrete.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KuemSoft.FullBlogApp.Core.Entities.Concrete.AppUser", b =>
                {
                    b.HasOne("KuemSoft.FullBlogApp.Core.Entities.Concrete.Img", "Img")
                        .WithMany("AppUsers")
                        .HasForeignKey("ImgId");

                    b.Navigation("Img");
                });

            modelBuilder.Entity("KuemSoft.FullBlogApp.Core.Entities.Concrete.Article", b =>
                {
                    b.HasOne("KuemSoft.FullBlogApp.Core.Entities.Concrete.AppUser", "AppUser")
                        .WithMany("Articles")
                        .HasForeignKey("AppUserId");

                    b.HasOne("KuemSoft.FullBlogApp.Core.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId");

                    b.HasOne("KuemSoft.FullBlogApp.Core.Entities.Concrete.Img", "Img")
                        .WithMany("Articles")
                        .HasForeignKey("ImgId");

                    b.Navigation("AppUser");

                    b.Navigation("Category");

                    b.Navigation("Img");
                });

            modelBuilder.Entity("KuemSoft.FullBlogApp.Core.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("KuemSoft.FullBlogApp.Core.Entities.Concrete.AppUser", "AppUser")
                        .WithMany("Comments")
                        .HasForeignKey("AppUserId");

                    b.HasOne("KuemSoft.FullBlogApp.Core.Entities.Concrete.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId");

                    b.Navigation("AppUser");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("KuemSoft.FullBlogApp.Core.Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("KuemSoft.FullBlogApp.Core.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("KuemSoft.FullBlogApp.Core.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("KuemSoft.FullBlogApp.Core.Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KuemSoft.FullBlogApp.Core.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("KuemSoft.FullBlogApp.Core.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KuemSoft.FullBlogApp.Core.Entities.Concrete.AppUser", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("KuemSoft.FullBlogApp.Core.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("KuemSoft.FullBlogApp.Core.Entities.Concrete.Img", b =>
                {
                    b.Navigation("AppUsers");

                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
